/// @title HuffswapPair
/// @author https://github.com/chirag-bgh
/// @notice 

/* Imports */
#include "huffmate/math/Math.huff"
#include "huffmate/tokens/ERC20.huff"

/* Interfaces */
#define function balanceOf(address) external returns (uint256)
#define function transfer(address to, uint256 amount) external
#define function mint(address to) external returns(uint256)

/* Events */
#define event Burn(address indexed sender, uint256 amount0, uint256 amount1);
#define event Mint(address indexed sender, uint256 amount0, uint256 amount1);
#define event Sync(uint256 reserve0, uint256 reserve1);

/* Storage Slots */
#define constant MINIMUM_LIQUIDITY = FREE_STORAGE_POINTER()
#define constant TOKEN0_SLOT = FREE_STORAGE_POINTER()
#define constant TOKEN1_SLOT = FREE_STORAGE_POINTER()
#define constant RESERVE0_SLOT = FREE_STORAGE_POINTER()
#define constant RESERVE1_SLOT = FREE_STORAGE_POINTER()



/// @notice constructor
#define macro CONSTRUCTOR() = takes(2) returns(0) {
    // ERC20("ZuniswapV2 Pair", "ZUNIV2", 18)
    
    0x04 
    calldataload
    [TOKEN0_SLOT]
    sstore

    0x24
    calldataload
    [TOKEN1_SLOT]
    sstore

    ERC20()
}

#define macro set_value() = takes(2)

/// @notice Creates 
#define macro _MINT() = takes(1) returns(1) {
    //input stack: [to]
    [RESERVE0_SLOT] sload // [RESERVE0]                 // reading directly from storage
    [RESERVE1_SLOT] sload // [reserve1, reserve0]



    

    
   

}

#define macro get_reserves() = takes(0) returns(3) {

    0x04
    calldataload



}






