/// @title HuffswapPair
/// @author https://github.com/chirag-bgh
/// @notice 

/* Imports */
#include "huffmate/math/Math.huff"
#include "huffmate/tokens/ERC20.huff"

/* Interfaces */
#define function balanceOf(address) external returns (uint256)
#define function transfer(address to, uint256 amount) external
#define function mint(address to) external returns(uint256)

/* Events */
#define event Burn(address indexed sender, uint256 amount0, uint256 amount1)
#define event Mint(address indexed sender, uint256 amount0, uint256 amount1)
#define event Sync(uint256 reserve0, uint256 reserve1)
#define event Swap( address indexed sender,uint amount0In,uint amount1In,uint amount0Out,uint amount1Out,address indexed to)

/* Storage Slots */
#define constant FACTORY = FREE_STORAGE_POINTER()
#define constant MINIMUM_LIQUIDITY = FREE_STORAGE_POINTER()
#define constant TOKEN0_SLOT = FREE_STORAGE_POINTER()
#define constant TOKEN1_SLOT = FREE_STORAGE_POINTER()
#define constant RESERVE0_SLOT = FREE_STORAGE_POINTER()
#define constant RESERVE1_SLOT = FREE_STORAGE_POINTER()
#define constant blockTimestampLast = FREE_STORAGE_POINTER()



/// @notice constructor
#define macro CONSTRUCTOR() = takes(2) returns(0) {
    // constructor() public { factory = msg.sender; token0 = _token0; token1 = _token1;}
    
    0x00
    mload
    [TOKEN0_SLOT]
    sstore

    0x20
    mload
    [TOKEN1_SLOT]
    sstore

    caller
    [FACTORY]
    sstore
}

/// @notice Creates 
#define macro _MINT() = takes(0) returns(0) {
    //input stack: [to]
    [RESERVE0_SLOT] sload // [RESERVE0]                 // reading directly from storage
    [RESERVE1_SLOT] sload // [reserve1, reserve0]
    
    [TOKEN0_SLOT] sload
    [TOKEN1_SLOT] sload 

    /* uint balance0 = IERC20(token0).balanceOf(address(this));
        uint balance1 = IERC20(token1).balanceOf(address(this));
        uint amount0 = balance0.sub(_reserve0);
        uint amount1 = balance1.sub(_reserve1);*/


    /*
    address
    balanceOf
    */
}







